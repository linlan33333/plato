// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmdcontext.proto

#include "cmdcontext.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gateway {
class CmdContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdContext> _instance;
} _CmdContext_default_instance_;
}  // namespace gateway
static void InitDefaultsscc_info_CmdContext_cmdcontext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gateway::_CmdContext_default_instance_;
    new (ptr) ::gateway::CmdContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gateway::CmdContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdContext_cmdcontext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CmdContext_cmdcontext_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cmdcontext_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cmdcontext_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cmdcontext_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cmdcontext_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gateway::CmdContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gateway::CmdContext, cmd_),
  PROTOBUF_FIELD_OFFSET(::gateway::CmdContext, connid_),
  PROTOBUF_FIELD_OFFSET(::gateway::CmdContext, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gateway::CmdContext)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gateway::_CmdContext_default_instance_),
};

const char descriptor_table_protodef_cmdcontext_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020cmdcontext.proto\022\007gateway\"w\n\nCmdContex"
  "t\022$\n\003Cmd\030\001 \001(\0162\027.gateway.CmdContext.CMD\022"
  "\016\n\006ConnID\030\002 \001(\004\022\017\n\007Payload\030\003 \001(\014\"\"\n\003CMD\022"
  "\016\n\nDelConnCmd\020\000\022\013\n\007PushCmd\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cmdcontext_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cmdcontext_2eproto_sccs[1] = {
  &scc_info_CmdContext_cmdcontext_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cmdcontext_2eproto_once;
static bool descriptor_table_cmdcontext_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cmdcontext_2eproto = {
  &descriptor_table_cmdcontext_2eproto_initialized, descriptor_table_protodef_cmdcontext_2eproto, "cmdcontext.proto", 156,
  &descriptor_table_cmdcontext_2eproto_once, descriptor_table_cmdcontext_2eproto_sccs, descriptor_table_cmdcontext_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cmdcontext_2eproto::offsets,
  file_level_metadata_cmdcontext_2eproto, 1, file_level_enum_descriptors_cmdcontext_2eproto, file_level_service_descriptors_cmdcontext_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cmdcontext_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cmdcontext_2eproto), true);
namespace gateway {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdContext_CMD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cmdcontext_2eproto);
  return file_level_enum_descriptors_cmdcontext_2eproto[0];
}
bool CmdContext_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CmdContext_CMD CmdContext::DelConnCmd;
constexpr CmdContext_CMD CmdContext::PushCmd;
constexpr CmdContext_CMD CmdContext::CMD_MIN;
constexpr CmdContext_CMD CmdContext::CMD_MAX;
constexpr int CmdContext::CMD_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CmdContext::InitAsDefaultInstance() {
}
class CmdContext::_Internal {
 public:
};

CmdContext::CmdContext()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gateway.CmdContext)
}
CmdContext::CmdContext(const CmdContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&connid_, &from.connid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&connid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:gateway.CmdContext)
}

void CmdContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CmdContext_cmdcontext_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&connid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&connid_)) + sizeof(cmd_));
}

CmdContext::~CmdContext() {
  // @@protoc_insertion_point(destructor:gateway.CmdContext)
  SharedDtor();
}

void CmdContext::SharedDtor() {
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CmdContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdContext& CmdContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdContext_cmdcontext_2eproto.base);
  return *internal_default_instance();
}


void CmdContext::Clear() {
// @@protoc_insertion_point(message_clear_start:gateway.CmdContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&connid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&connid_)) + sizeof(cmd_));
  _internal_metadata_.Clear();
}

const char* CmdContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gateway.CmdContext.CMD Cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::gateway::CmdContext_CMD>(val));
        } else goto handle_unusual;
        continue;
      // uint64 ConnID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          connid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gateway.CmdContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gateway.CmdContext.CMD Cmd = 1;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // uint64 ConnID = 2;
  if (this->connid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_connid(), target);
  }

  // bytes Payload = 3;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gateway.CmdContext)
  return target;
}

size_t CmdContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gateway.CmdContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint64 ConnID = 2;
  if (this->connid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_connid());
  }

  // .gateway.CmdContext.CMD Cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gateway.CmdContext)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gateway.CmdContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gateway.CmdContext)
    MergeFrom(*source);
  }
}

void CmdContext::MergeFrom(const CmdContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gateway.CmdContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.connid() != 0) {
    _internal_set_connid(from._internal_connid());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void CmdContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gateway.CmdContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdContext::CopyFrom(const CmdContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gateway.CmdContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdContext::IsInitialized() const {
  return true;
}

void CmdContext::InternalSwap(CmdContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(connid_, other->connid_);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdContext::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gateway
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gateway::CmdContext* Arena::CreateMaybeMessage< ::gateway::CmdContext >(Arena* arena) {
  return Arena::CreateInternal< ::gateway::CmdContext >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
