// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#include "common/grpc/domain/user/user.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace UserDomain {
constexpr QueryUsersRequest_OptsEntry_DoNotUse::QueryUsersRequest_OptsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct QueryUsersRequest_OptsEntry_DoNotUseDefaultTypeInternal {
  constexpr QueryUsersRequest_OptsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryUsersRequest_OptsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    QueryUsersRequest_OptsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryUsersRequest_OptsEntry_DoNotUseDefaultTypeInternal _QueryUsersRequest_OptsEntry_DoNotUse_default_instance_;
constexpr QueryUsersRequest::QueryUsersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opts_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct QueryUsersRequestDefaultTypeInternal {
  constexpr QueryUsersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryUsersRequestDefaultTypeInternal() {}
  union {
    QueryUsersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryUsersRequestDefaultTypeInternal _QueryUsersRequest_default_instance_;
constexpr QueryUserOption::QueryUserOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deviceidlist_()
  , _deviceidlist_cached_byte_size_(0)
  , mode_(nullptr)
  , alldevice_(false)
  , activedevice_(false){}
struct QueryUserOptionDefaultTypeInternal {
  constexpr QueryUserOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryUserOptionDefaultTypeInternal() {}
  union {
    QueryUserOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryUserOptionDefaultTypeInternal _QueryUserOption_default_instance_;
constexpr OptionMode::OptionMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(false)
  , setting_(false)
  , information_(false)
  , profile_(false){}
struct OptionModeDefaultTypeInternal {
  constexpr OptionModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OptionModeDefaultTypeInternal() {}
  union {
    OptionMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OptionModeDefaultTypeInternal _OptionMode_default_instance_;
constexpr QueryUsersResponse_UsersEntry_DoNotUse::QueryUsersResponse_UsersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct QueryUsersResponse_UsersEntry_DoNotUseDefaultTypeInternal {
  constexpr QueryUsersResponse_UsersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryUsersResponse_UsersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    QueryUsersResponse_UsersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryUsersResponse_UsersEntry_DoNotUseDefaultTypeInternal _QueryUsersResponse_UsersEntry_DoNotUse_default_instance_;
constexpr QueryUsersResponse::QueryUsersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : users_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , base_(nullptr){}
struct QueryUsersResponseDefaultTypeInternal {
  constexpr QueryUsersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryUsersResponseDefaultTypeInternal() {}
  union {
    QueryUsersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryUsersResponseDefaultTypeInternal _QueryUsersResponse_default_instance_;
constexpr CreateUsersRequest::CreateUsersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : users_(){}
struct CreateUsersRequestDefaultTypeInternal {
  constexpr CreateUsersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUsersRequestDefaultTypeInternal() {}
  union {
    CreateUsersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUsersRequestDefaultTypeInternal _CreateUsersRequest_default_instance_;
constexpr CreateUsersResponse::CreateUsersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_(nullptr)
  , code_(0){}
struct CreateUsersResponseDefaultTypeInternal {
  constexpr CreateUsersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUsersResponseDefaultTypeInternal() {}
  union {
    CreateUsersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUsersResponseDefaultTypeInternal _CreateUsersResponse_default_instance_;
constexpr UpdateUsersRequest::UpdateUsersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : users_(){}
struct UpdateUsersRequestDefaultTypeInternal {
  constexpr UpdateUsersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateUsersRequestDefaultTypeInternal() {}
  union {
    UpdateUsersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateUsersRequestDefaultTypeInternal _UpdateUsersRequest_default_instance_;
constexpr UpdateUsersResponse::UpdateUsersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_(nullptr)
  , code_(0){}
struct UpdateUsersResponseDefaultTypeInternal {
  constexpr UpdateUsersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateUsersResponseDefaultTypeInternal() {}
  union {
    UpdateUsersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateUsersResponseDefaultTypeInternal _UpdateUsersResponse_default_instance_;
}  // namespace UserDomain
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_user_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_user_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_user_2eproto = nullptr;

const uint32_t TableStruct_user_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersRequest_OptsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersRequest_OptsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersRequest_OptsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersRequest_OptsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersRequest, opts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUserOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUserOption, deviceidlist_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUserOption, alldevice_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUserOption, activedevice_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUserOption, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserDomain::OptionMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserDomain::OptionMode, device_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::OptionMode, setting_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::OptionMode, information_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::OptionMode, profile_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersResponse_UsersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersResponse_UsersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersResponse_UsersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersResponse_UsersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersResponse, base_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::QueryUsersResponse, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserDomain::CreateUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserDomain::CreateUsersRequest, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserDomain::CreateUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserDomain::CreateUsersResponse, base_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::CreateUsersResponse, code_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::CreateUsersResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserDomain::UpdateUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserDomain::UpdateUsersRequest, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserDomain::UpdateUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserDomain::UpdateUsersResponse, base_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::UpdateUsersResponse, code_),
  PROTOBUF_FIELD_OFFSET(::UserDomain::UpdateUsersResponse, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::UserDomain::QueryUsersRequest_OptsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::UserDomain::QueryUsersRequest)},
  { 17, -1, -1, sizeof(::UserDomain::QueryUserOption)},
  { 27, -1, -1, sizeof(::UserDomain::OptionMode)},
  { 37, 45, -1, sizeof(::UserDomain::QueryUsersResponse_UsersEntry_DoNotUse)},
  { 47, -1, -1, sizeof(::UserDomain::QueryUsersResponse)},
  { 55, -1, -1, sizeof(::UserDomain::CreateUsersRequest)},
  { 62, -1, -1, sizeof(::UserDomain::CreateUsersResponse)},
  { 71, -1, -1, sizeof(::UserDomain::UpdateUsersRequest)},
  { 78, -1, -1, sizeof(::UserDomain::UpdateUsersResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserDomain::_QueryUsersRequest_OptsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserDomain::_QueryUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserDomain::_QueryUserOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserDomain::_OptionMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserDomain::_QueryUsersResponse_UsersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserDomain::_QueryUsersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserDomain::_CreateUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserDomain::_CreateUsersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserDomain::_UpdateUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserDomain::_UpdateUsersResponse_default_instance_),
};

const char descriptor_table_protodef_user_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nuser.proto\022\nUserDomain\032\016user_dto.proto"
  "\032\nbase.proto\"\224\001\n\021QueryUsersRequest\0225\n\004op"
  "ts\030\001 \003(\0132\'.UserDomain.QueryUsersRequest."
  "OptsEntry\032H\n\tOptsEntry\022\013\n\003key\030\001 \001(\004\022*\n\005v"
  "alue\030\002 \001(\0132\033.UserDomain.QueryUserOption:"
  "\0028\001\"v\n\017QueryUserOption\022\024\n\014deviceIDList\030\001"
  " \003(\004\022\021\n\tallDevice\030\002 \001(\010\022\024\n\014activeDevice\030"
  "\003 \001(\010\022$\n\004mode\030\004 \001(\0132\026.UserDomain.OptionM"
  "ode\"S\n\nOptionMode\022\016\n\006Device\030\001 \001(\010\022\017\n\007Set"
  "ting\030\002 \001(\010\022\023\n\013Information\030\003 \001(\010\022\017\n\007Profi"
  "le\030\004 \001(\010\"\251\001\n\022QueryUsersResponse\022\034\n\004base\030"
  "\001 \001(\0132\016.base.BaseResp\0228\n\005users\030\002 \003(\0132).U"
  "serDomain.QueryUsersResponse.UsersEntry\032"
  ";\n\nUsersEntry\022\013\n\003key\030\001 \001(\004\022\034\n\005value\030\002 \001("
  "\0132\r.user.UserDTO:\0028\001\"2\n\022CreateUsersReque"
  "st\022\034\n\005users\030\001 \003(\0132\r.user.UserDTO\"N\n\023Crea"
  "teUsersResponse\022\034\n\004base\030\001 \001(\0132\016.base.Bas"
  "eResp\022\014\n\004code\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\"2\n\022Upda"
  "teUsersRequest\022\034\n\005users\030\001 \003(\0132\r.user.Use"
  "rDTO\"N\n\023UpdateUsersResponse\022\034\n\004base\030\001 \001("
  "\0132\016.base.BaseResp\022\014\n\004code\030\002 \001(\005\022\013\n\003msg\030\003"
  " \001(\t2\363\001\n\004User\022K\n\nQueryUsers\022\035.UserDomain"
  ".QueryUsersRequest\032\036.UserDomain.QueryUse"
  "rsResponse\022N\n\013CreateUsers\022\036.UserDomain.C"
  "reateUsersRequest\032\037.UserDomain.CreateUse"
  "rsResponse\022N\n\013UpdateUsers\022\036.UserDomain.U"
  "pdateUsersRequest\032\037.UserDomain.UpdateUse"
  "rsResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_user_2eproto_deps[2] = {
  &::descriptor_table_base_2eproto,
  &::descriptor_table_user_5fdto_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_user_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto = {
  false, false, 1098, descriptor_table_protodef_user_2eproto, "user.proto", 
  &descriptor_table_user_2eproto_once, descriptor_table_user_2eproto_deps, 2, 10,
  schemas, file_default_instances, TableStruct_user_2eproto::offsets,
  file_level_metadata_user_2eproto, file_level_enum_descriptors_user_2eproto, file_level_service_descriptors_user_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_user_2eproto_getter() {
  return &descriptor_table_user_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_user_2eproto(&descriptor_table_user_2eproto);
namespace UserDomain {

// ===================================================================

QueryUsersRequest_OptsEntry_DoNotUse::QueryUsersRequest_OptsEntry_DoNotUse() {}
QueryUsersRequest_OptsEntry_DoNotUse::QueryUsersRequest_OptsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryUsersRequest_OptsEntry_DoNotUse::MergeFrom(const QueryUsersRequest_OptsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryUsersRequest_OptsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[0]);
}

// ===================================================================

class QueryUsersRequest::_Internal {
 public:
};

QueryUsersRequest::QueryUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  opts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserDomain.QueryUsersRequest)
}
QueryUsersRequest::QueryUsersRequest(const QueryUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opts_.MergeFrom(from.opts_);
  // @@protoc_insertion_point(copy_constructor:UserDomain.QueryUsersRequest)
}

inline void QueryUsersRequest::SharedCtor() {
}

QueryUsersRequest::~QueryUsersRequest() {
  // @@protoc_insertion_point(destructor:UserDomain.QueryUsersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryUsersRequest::ArenaDtor(void* object) {
  QueryUsersRequest* _this = reinterpret_cast< QueryUsersRequest* >(object);
  (void)_this;
  _this->opts_. ~MapField();
}
inline void QueryUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &QueryUsersRequest::ArenaDtor);
  }
}
void QueryUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserDomain.QueryUsersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, .UserDomain.QueryUserOption> opts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&opts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryUsersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserDomain.QueryUsersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .UserDomain.QueryUserOption> opts = 1;
  if (!this->_internal_opts().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_opts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_opts().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >::const_iterator
          it = this->_internal_opts().begin();
          it != this->_internal_opts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryUsersRequest_OptsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >::const_iterator
          it = this->_internal_opts().begin();
          it != this->_internal_opts().end(); ++it) {
        target = QueryUsersRequest_OptsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserDomain.QueryUsersRequest)
  return target;
}

size_t QueryUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserDomain.QueryUsersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .UserDomain.QueryUserOption> opts = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_opts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >::const_iterator
      it = this->_internal_opts().begin();
      it != this->_internal_opts().end(); ++it) {
    total_size += QueryUsersRequest_OptsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryUsersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryUsersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryUsersRequest::GetClassData() const { return &_class_data_; }

void QueryUsersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryUsersRequest *>(to)->MergeFrom(
      static_cast<const QueryUsersRequest &>(from));
}


void QueryUsersRequest::MergeFrom(const QueryUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserDomain.QueryUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  opts_.MergeFrom(from.opts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryUsersRequest::CopyFrom(const QueryUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserDomain.QueryUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUsersRequest::IsInitialized() const {
  return true;
}

void QueryUsersRequest::InternalSwap(QueryUsersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  opts_.InternalSwap(&other->opts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryUsersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[1]);
}

// ===================================================================

class QueryUserOption::_Internal {
 public:
  static const ::UserDomain::OptionMode& mode(const QueryUserOption* msg);
};

const ::UserDomain::OptionMode&
QueryUserOption::_Internal::mode(const QueryUserOption* msg) {
  return *msg->mode_;
}
QueryUserOption::QueryUserOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  deviceidlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserDomain.QueryUserOption)
}
QueryUserOption::QueryUserOption(const QueryUserOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deviceidlist_(from.deviceidlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mode()) {
    mode_ = new ::UserDomain::OptionMode(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  ::memcpy(&alldevice_, &from.alldevice_,
    static_cast<size_t>(reinterpret_cast<char*>(&activedevice_) -
    reinterpret_cast<char*>(&alldevice_)) + sizeof(activedevice_));
  // @@protoc_insertion_point(copy_constructor:UserDomain.QueryUserOption)
}

inline void QueryUserOption::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&activedevice_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(activedevice_));
}

QueryUserOption::~QueryUserOption() {
  // @@protoc_insertion_point(destructor:UserDomain.QueryUserOption)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryUserOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mode_;
}

void QueryUserOption::ArenaDtor(void* object) {
  QueryUserOption* _this = reinterpret_cast< QueryUserOption* >(object);
  (void)_this;
}
void QueryUserOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryUserOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryUserOption::Clear() {
// @@protoc_insertion_point(message_clear_start:UserDomain.QueryUserOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceidlist_.Clear();
  if (GetArenaForAllocation() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
  ::memset(&alldevice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activedevice_) -
      reinterpret_cast<char*>(&alldevice_)) + sizeof(activedevice_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryUserOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 deviceIDList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_deviceidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_deviceidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allDevice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          alldevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool activeDevice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          activedevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .UserDomain.OptionMode mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryUserOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserDomain.QueryUserOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 deviceIDList = 1;
  {
    int byte_size = _deviceidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_deviceidlist(), byte_size, target);
    }
  }

  // bool allDevice = 2;
  if (this->_internal_alldevice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_alldevice(), target);
  }

  // bool activeDevice = 3;
  if (this->_internal_activedevice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_activedevice(), target);
  }

  // .UserDomain.OptionMode mode = 4;
  if (this->_internal_has_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserDomain.QueryUserOption)
  return target;
}

size_t QueryUserOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserDomain.QueryUserOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 deviceIDList = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->deviceidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _deviceidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .UserDomain.OptionMode mode = 4;
  if (this->_internal_has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mode_);
  }

  // bool allDevice = 2;
  if (this->_internal_alldevice() != 0) {
    total_size += 1 + 1;
  }

  // bool activeDevice = 3;
  if (this->_internal_activedevice() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryUserOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryUserOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryUserOption::GetClassData() const { return &_class_data_; }

void QueryUserOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryUserOption *>(to)->MergeFrom(
      static_cast<const QueryUserOption &>(from));
}


void QueryUserOption::MergeFrom(const QueryUserOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserDomain.QueryUserOption)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  deviceidlist_.MergeFrom(from.deviceidlist_);
  if (from._internal_has_mode()) {
    _internal_mutable_mode()->::UserDomain::OptionMode::MergeFrom(from._internal_mode());
  }
  if (from._internal_alldevice() != 0) {
    _internal_set_alldevice(from._internal_alldevice());
  }
  if (from._internal_activedevice() != 0) {
    _internal_set_activedevice(from._internal_activedevice());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryUserOption::CopyFrom(const QueryUserOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserDomain.QueryUserOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserOption::IsInitialized() const {
  return true;
}

void QueryUserOption::InternalSwap(QueryUserOption* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  deviceidlist_.InternalSwap(&other->deviceidlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryUserOption, activedevice_)
      + sizeof(QueryUserOption::activedevice_)
      - PROTOBUF_FIELD_OFFSET(QueryUserOption, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryUserOption::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[2]);
}

// ===================================================================

class OptionMode::_Internal {
 public:
};

OptionMode::OptionMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserDomain.OptionMode)
}
OptionMode::OptionMode(const OptionMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&device_, &from.device_,
    static_cast<size_t>(reinterpret_cast<char*>(&profile_) -
    reinterpret_cast<char*>(&device_)) + sizeof(profile_));
  // @@protoc_insertion_point(copy_constructor:UserDomain.OptionMode)
}

inline void OptionMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&profile_) -
    reinterpret_cast<char*>(&device_)) + sizeof(profile_));
}

OptionMode::~OptionMode() {
  // @@protoc_insertion_point(destructor:UserDomain.OptionMode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OptionMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OptionMode::ArenaDtor(void* object) {
  OptionMode* _this = reinterpret_cast< OptionMode* >(object);
  (void)_this;
}
void OptionMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptionMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OptionMode::Clear() {
// @@protoc_insertion_point(message_clear_start:UserDomain.OptionMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&profile_) -
      reinterpret_cast<char*>(&device_)) + sizeof(profile_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Setting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Information = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          information_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Profile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          profile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserDomain.OptionMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Device = 1;
  if (this->_internal_device() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_device(), target);
  }

  // bool Setting = 2;
  if (this->_internal_setting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_setting(), target);
  }

  // bool Information = 3;
  if (this->_internal_information() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_information(), target);
  }

  // bool Profile = 4;
  if (this->_internal_profile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_profile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserDomain.OptionMode)
  return target;
}

size_t OptionMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserDomain.OptionMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Device = 1;
  if (this->_internal_device() != 0) {
    total_size += 1 + 1;
  }

  // bool Setting = 2;
  if (this->_internal_setting() != 0) {
    total_size += 1 + 1;
  }

  // bool Information = 3;
  if (this->_internal_information() != 0) {
    total_size += 1 + 1;
  }

  // bool Profile = 4;
  if (this->_internal_profile() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OptionMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionMode::GetClassData() const { return &_class_data_; }

void OptionMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OptionMode *>(to)->MergeFrom(
      static_cast<const OptionMode &>(from));
}


void OptionMode::MergeFrom(const OptionMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserDomain.OptionMode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_device() != 0) {
    _internal_set_device(from._internal_device());
  }
  if (from._internal_setting() != 0) {
    _internal_set_setting(from._internal_setting());
  }
  if (from._internal_information() != 0) {
    _internal_set_information(from._internal_information());
  }
  if (from._internal_profile() != 0) {
    _internal_set_profile(from._internal_profile());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionMode::CopyFrom(const OptionMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserDomain.OptionMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionMode::IsInitialized() const {
  return true;
}

void OptionMode::InternalSwap(OptionMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionMode, profile_)
      + sizeof(OptionMode::profile_)
      - PROTOBUF_FIELD_OFFSET(OptionMode, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[3]);
}

// ===================================================================

QueryUsersResponse_UsersEntry_DoNotUse::QueryUsersResponse_UsersEntry_DoNotUse() {}
QueryUsersResponse_UsersEntry_DoNotUse::QueryUsersResponse_UsersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryUsersResponse_UsersEntry_DoNotUse::MergeFrom(const QueryUsersResponse_UsersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryUsersResponse_UsersEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[4]);
}

// ===================================================================

class QueryUsersResponse::_Internal {
 public:
  static const ::base::BaseResp& base(const QueryUsersResponse* msg);
};

const ::base::BaseResp&
QueryUsersResponse::_Internal::base(const QueryUsersResponse* msg) {
  return *msg->base_;
}
void QueryUsersResponse::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void QueryUsersResponse::clear_users() {
  users_.Clear();
}
QueryUsersResponse::QueryUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  users_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserDomain.QueryUsersResponse)
}
QueryUsersResponse::QueryUsersResponse(const QueryUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  users_.MergeFrom(from.users_);
  if (from._internal_has_base()) {
    base_ = new ::base::BaseResp(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:UserDomain.QueryUsersResponse)
}

inline void QueryUsersResponse::SharedCtor() {
base_ = nullptr;
}

QueryUsersResponse::~QueryUsersResponse() {
  // @@protoc_insertion_point(destructor:UserDomain.QueryUsersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void QueryUsersResponse::ArenaDtor(void* object) {
  QueryUsersResponse* _this = reinterpret_cast< QueryUsersResponse* >(object);
  (void)_this;
  _this->users_. ~MapField();
}
inline void QueryUsersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &QueryUsersResponse::ArenaDtor);
  }
}
void QueryUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserDomain.QueryUsersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryUsersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .base.BaseResp base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, .user.UserDTO> users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&users_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryUsersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserDomain.QueryUsersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .base.BaseResp base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // map<uint64, .user.UserDTO> users = 2;
  if (!this->_internal_users().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_users().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_users().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >::const_iterator
          it = this->_internal_users().begin();
          it != this->_internal_users().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryUsersResponse_UsersEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >::const_iterator
          it = this->_internal_users().begin();
          it != this->_internal_users().end(); ++it) {
        target = QueryUsersResponse_UsersEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserDomain.QueryUsersResponse)
  return target;
}

size_t QueryUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserDomain.QueryUsersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .user.UserDTO> users = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_users_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >::const_iterator
      it = this->_internal_users().begin();
      it != this->_internal_users().end(); ++it) {
    total_size += QueryUsersResponse_UsersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .base.BaseResp base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryUsersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryUsersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryUsersResponse::GetClassData() const { return &_class_data_; }

void QueryUsersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryUsersResponse *>(to)->MergeFrom(
      static_cast<const QueryUsersResponse &>(from));
}


void QueryUsersResponse::MergeFrom(const QueryUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserDomain.QueryUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from._internal_has_base()) {
    _internal_mutable_base()->::base::BaseResp::MergeFrom(from._internal_base());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryUsersResponse::CopyFrom(const QueryUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserDomain.QueryUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUsersResponse::IsInitialized() const {
  return true;
}

void QueryUsersResponse::InternalSwap(QueryUsersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryUsersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[5]);
}

// ===================================================================

class CreateUsersRequest::_Internal {
 public:
};

void CreateUsersRequest::clear_users() {
  users_.Clear();
}
CreateUsersRequest::CreateUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  users_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserDomain.CreateUsersRequest)
}
CreateUsersRequest::CreateUsersRequest(const CreateUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UserDomain.CreateUsersRequest)
}

inline void CreateUsersRequest::SharedCtor() {
}

CreateUsersRequest::~CreateUsersRequest() {
  // @@protoc_insertion_point(destructor:UserDomain.CreateUsersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateUsersRequest::ArenaDtor(void* object) {
  CreateUsersRequest* _this = reinterpret_cast< CreateUsersRequest* >(object);
  (void)_this;
}
void CreateUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserDomain.CreateUsersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .user.UserDTO users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateUsersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserDomain.CreateUsersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .user.UserDTO users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserDomain.CreateUsersRequest)
  return target;
}

size_t CreateUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserDomain.CreateUsersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .user.UserDTO users = 1;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUsersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateUsersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUsersRequest::GetClassData() const { return &_class_data_; }

void CreateUsersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateUsersRequest *>(to)->MergeFrom(
      static_cast<const CreateUsersRequest &>(from));
}


void CreateUsersRequest::MergeFrom(const CreateUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserDomain.CreateUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUsersRequest::CopyFrom(const CreateUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserDomain.CreateUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUsersRequest::IsInitialized() const {
  return true;
}

void CreateUsersRequest::InternalSwap(CreateUsersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUsersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[6]);
}

// ===================================================================

class CreateUsersResponse::_Internal {
 public:
  static const ::base::BaseResp& base(const CreateUsersResponse* msg);
};

const ::base::BaseResp&
CreateUsersResponse::_Internal::base(const CreateUsersResponse* msg) {
  return *msg->base_;
}
void CreateUsersResponse::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
CreateUsersResponse::CreateUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserDomain.CreateUsersResponse)
}
CreateUsersResponse::CreateUsersResponse(const CreateUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    base_ = new ::base::BaseResp(*from.base_);
  } else {
    base_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:UserDomain.CreateUsersResponse)
}

inline void CreateUsersResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&base_)) + sizeof(code_));
}

CreateUsersResponse::~CreateUsersResponse() {
  // @@protoc_insertion_point(destructor:UserDomain.CreateUsersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreateUsersResponse::ArenaDtor(void* object) {
  CreateUsersResponse* _this = reinterpret_cast< CreateUsersResponse* >(object);
  (void)_this;
}
void CreateUsersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserDomain.CreateUsersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUsersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .base.BaseResp base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserDomain.CreateUsersResponse.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateUsersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserDomain.CreateUsersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .base.BaseResp base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserDomain.CreateUsersResponse.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserDomain.CreateUsersResponse)
  return target;
}

size_t CreateUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserDomain.CreateUsersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .base.BaseResp base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUsersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateUsersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUsersResponse::GetClassData() const { return &_class_data_; }

void CreateUsersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateUsersResponse *>(to)->MergeFrom(
      static_cast<const CreateUsersResponse &>(from));
}


void CreateUsersResponse::MergeFrom(const CreateUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserDomain.CreateUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_base()) {
    _internal_mutable_base()->::base::BaseResp::MergeFrom(from._internal_base());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUsersResponse::CopyFrom(const CreateUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserDomain.CreateUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUsersResponse::IsInitialized() const {
  return true;
}

void CreateUsersResponse::InternalSwap(CreateUsersResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateUsersResponse, code_)
      + sizeof(CreateUsersResponse::code_)
      - PROTOBUF_FIELD_OFFSET(CreateUsersResponse, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUsersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[7]);
}

// ===================================================================

class UpdateUsersRequest::_Internal {
 public:
};

void UpdateUsersRequest::clear_users() {
  users_.Clear();
}
UpdateUsersRequest::UpdateUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  users_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserDomain.UpdateUsersRequest)
}
UpdateUsersRequest::UpdateUsersRequest(const UpdateUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UserDomain.UpdateUsersRequest)
}

inline void UpdateUsersRequest::SharedCtor() {
}

UpdateUsersRequest::~UpdateUsersRequest() {
  // @@protoc_insertion_point(destructor:UserDomain.UpdateUsersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateUsersRequest::ArenaDtor(void* object) {
  UpdateUsersRequest* _this = reinterpret_cast< UpdateUsersRequest* >(object);
  (void)_this;
}
void UpdateUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserDomain.UpdateUsersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .user.UserDTO users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateUsersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserDomain.UpdateUsersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .user.UserDTO users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserDomain.UpdateUsersRequest)
  return target;
}

size_t UpdateUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserDomain.UpdateUsersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .user.UserDTO users = 1;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateUsersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateUsersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateUsersRequest::GetClassData() const { return &_class_data_; }

void UpdateUsersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateUsersRequest *>(to)->MergeFrom(
      static_cast<const UpdateUsersRequest &>(from));
}


void UpdateUsersRequest::MergeFrom(const UpdateUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserDomain.UpdateUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateUsersRequest::CopyFrom(const UpdateUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserDomain.UpdateUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUsersRequest::IsInitialized() const {
  return true;
}

void UpdateUsersRequest::InternalSwap(UpdateUsersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUsersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[8]);
}

// ===================================================================

class UpdateUsersResponse::_Internal {
 public:
  static const ::base::BaseResp& base(const UpdateUsersResponse* msg);
};

const ::base::BaseResp&
UpdateUsersResponse::_Internal::base(const UpdateUsersResponse* msg) {
  return *msg->base_;
}
void UpdateUsersResponse::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
UpdateUsersResponse::UpdateUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UserDomain.UpdateUsersResponse)
}
UpdateUsersResponse::UpdateUsersResponse(const UpdateUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    base_ = new ::base::BaseResp(*from.base_);
  } else {
    base_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:UserDomain.UpdateUsersResponse)
}

inline void UpdateUsersResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&base_)) + sizeof(code_));
}

UpdateUsersResponse::~UpdateUsersResponse() {
  // @@protoc_insertion_point(destructor:UserDomain.UpdateUsersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void UpdateUsersResponse::ArenaDtor(void* object) {
  UpdateUsersResponse* _this = reinterpret_cast< UpdateUsersResponse* >(object);
  (void)_this;
}
void UpdateUsersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserDomain.UpdateUsersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUsersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .base.BaseResp base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserDomain.UpdateUsersResponse.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateUsersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserDomain.UpdateUsersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .base.BaseResp base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserDomain.UpdateUsersResponse.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserDomain.UpdateUsersResponse)
  return target;
}

size_t UpdateUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserDomain.UpdateUsersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .base.BaseResp base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateUsersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateUsersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateUsersResponse::GetClassData() const { return &_class_data_; }

void UpdateUsersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateUsersResponse *>(to)->MergeFrom(
      static_cast<const UpdateUsersResponse &>(from));
}


void UpdateUsersResponse::MergeFrom(const UpdateUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserDomain.UpdateUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_base()) {
    _internal_mutable_base()->::base::BaseResp::MergeFrom(from._internal_base());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateUsersResponse::CopyFrom(const UpdateUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserDomain.UpdateUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUsersResponse::IsInitialized() const {
  return true;
}

void UpdateUsersResponse::InternalSwap(UpdateUsersResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateUsersResponse, code_)
      + sizeof(UpdateUsersResponse::code_)
      - PROTOBUF_FIELD_OFFSET(UpdateUsersResponse, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUsersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace UserDomain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UserDomain::QueryUsersRequest_OptsEntry_DoNotUse* Arena::CreateMaybeMessage< ::UserDomain::QueryUsersRequest_OptsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserDomain::QueryUsersRequest_OptsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::UserDomain::QueryUsersRequest* Arena::CreateMaybeMessage< ::UserDomain::QueryUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserDomain::QueryUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserDomain::QueryUserOption* Arena::CreateMaybeMessage< ::UserDomain::QueryUserOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserDomain::QueryUserOption >(arena);
}
template<> PROTOBUF_NOINLINE ::UserDomain::OptionMode* Arena::CreateMaybeMessage< ::UserDomain::OptionMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserDomain::OptionMode >(arena);
}
template<> PROTOBUF_NOINLINE ::UserDomain::QueryUsersResponse_UsersEntry_DoNotUse* Arena::CreateMaybeMessage< ::UserDomain::QueryUsersResponse_UsersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserDomain::QueryUsersResponse_UsersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::UserDomain::QueryUsersResponse* Arena::CreateMaybeMessage< ::UserDomain::QueryUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserDomain::QueryUsersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UserDomain::CreateUsersRequest* Arena::CreateMaybeMessage< ::UserDomain::CreateUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserDomain::CreateUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserDomain::CreateUsersResponse* Arena::CreateMaybeMessage< ::UserDomain::CreateUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserDomain::CreateUsersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UserDomain::UpdateUsersRequest* Arena::CreateMaybeMessage< ::UserDomain::UpdateUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserDomain::UpdateUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserDomain::UpdateUsersResponse* Arena::CreateMaybeMessage< ::UserDomain::UpdateUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserDomain::UpdateUsersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
