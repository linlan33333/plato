// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user.proto
#ifndef GRPC_user_2eproto__INCLUDED
#define GRPC_user_2eproto__INCLUDED

#include "user.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace UserDomain {

// 对应service.go文件中的那三个RPC接口
class User final {
 public:
  static constexpr char const* service_full_name() {
    return "UserDomain.User";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status QueryUsers(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest& request, ::UserDomain::QueryUsersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::QueryUsersResponse>> AsyncQueryUsers(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::QueryUsersResponse>>(AsyncQueryUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::QueryUsersResponse>> PrepareAsyncQueryUsers(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::QueryUsersResponse>>(PrepareAsyncQueryUsersRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateUsers(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest& request, ::UserDomain::CreateUsersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::CreateUsersResponse>> AsyncCreateUsers(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::CreateUsersResponse>>(AsyncCreateUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::CreateUsersResponse>> PrepareAsyncCreateUsers(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::CreateUsersResponse>>(PrepareAsyncCreateUsersRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUsers(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest& request, ::UserDomain::UpdateUsersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::UpdateUsersResponse>> AsyncUpdateUsers(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::UpdateUsersResponse>>(AsyncUpdateUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::UpdateUsersResponse>> PrepareAsyncUpdateUsers(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::UpdateUsersResponse>>(PrepareAsyncUpdateUsersRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void QueryUsers(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest* request, ::UserDomain::QueryUsersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryUsers(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest* request, ::UserDomain::QueryUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateUsers(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest* request, ::UserDomain::CreateUsersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateUsers(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest* request, ::UserDomain::CreateUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateUsers(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest* request, ::UserDomain::UpdateUsersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUsers(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest* request, ::UserDomain::UpdateUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::QueryUsersResponse>* AsyncQueryUsersRaw(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::QueryUsersResponse>* PrepareAsyncQueryUsersRaw(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::CreateUsersResponse>* AsyncCreateUsersRaw(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::CreateUsersResponse>* PrepareAsyncCreateUsersRaw(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::UpdateUsersResponse>* AsyncUpdateUsersRaw(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserDomain::UpdateUsersResponse>* PrepareAsyncUpdateUsersRaw(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status QueryUsers(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest& request, ::UserDomain::QueryUsersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::QueryUsersResponse>> AsyncQueryUsers(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::QueryUsersResponse>>(AsyncQueryUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::QueryUsersResponse>> PrepareAsyncQueryUsers(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::QueryUsersResponse>>(PrepareAsyncQueryUsersRaw(context, request, cq));
    }
    ::grpc::Status CreateUsers(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest& request, ::UserDomain::CreateUsersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::CreateUsersResponse>> AsyncCreateUsers(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::CreateUsersResponse>>(AsyncCreateUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::CreateUsersResponse>> PrepareAsyncCreateUsers(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::CreateUsersResponse>>(PrepareAsyncCreateUsersRaw(context, request, cq));
    }
    ::grpc::Status UpdateUsers(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest& request, ::UserDomain::UpdateUsersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::UpdateUsersResponse>> AsyncUpdateUsers(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::UpdateUsersResponse>>(AsyncUpdateUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::UpdateUsersResponse>> PrepareAsyncUpdateUsers(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserDomain::UpdateUsersResponse>>(PrepareAsyncUpdateUsersRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void QueryUsers(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest* request, ::UserDomain::QueryUsersResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryUsers(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest* request, ::UserDomain::QueryUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateUsers(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest* request, ::UserDomain::CreateUsersResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateUsers(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest* request, ::UserDomain::CreateUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateUsers(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest* request, ::UserDomain::UpdateUsersResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateUsers(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest* request, ::UserDomain::UpdateUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::UserDomain::QueryUsersResponse>* AsyncQueryUsersRaw(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UserDomain::QueryUsersResponse>* PrepareAsyncQueryUsersRaw(::grpc::ClientContext* context, const ::UserDomain::QueryUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UserDomain::CreateUsersResponse>* AsyncCreateUsersRaw(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UserDomain::CreateUsersResponse>* PrepareAsyncCreateUsersRaw(::grpc::ClientContext* context, const ::UserDomain::CreateUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UserDomain::UpdateUsersResponse>* AsyncUpdateUsersRaw(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UserDomain::UpdateUsersResponse>* PrepareAsyncUpdateUsersRaw(::grpc::ClientContext* context, const ::UserDomain::UpdateUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_QueryUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUsers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status QueryUsers(::grpc::ServerContext* context, const ::UserDomain::QueryUsersRequest* request, ::UserDomain::QueryUsersResponse* response);
    virtual ::grpc::Status CreateUsers(::grpc::ServerContext* context, const ::UserDomain::CreateUsersRequest* request, ::UserDomain::CreateUsersResponse* response);
    virtual ::grpc::Status UpdateUsers(::grpc::ServerContext* context, const ::UserDomain::UpdateUsersRequest* request, ::UserDomain::UpdateUsersResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryUsers() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_QueryUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::QueryUsersRequest* /*request*/, ::UserDomain::QueryUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryUsers(::grpc::ServerContext* context, ::UserDomain::QueryUsersRequest* request, ::grpc::ServerAsyncResponseWriter< ::UserDomain::QueryUsersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateUsers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::CreateUsersRequest* /*request*/, ::UserDomain::CreateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUsers(::grpc::ServerContext* context, ::UserDomain::CreateUsersRequest* request, ::grpc::ServerAsyncResponseWriter< ::UserDomain::CreateUsersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUsers() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::UpdateUsersRequest* /*request*/, ::UserDomain::UpdateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUsers(::grpc::ServerContext* context, ::UserDomain::UpdateUsersRequest* request, ::grpc::ServerAsyncResponseWriter< ::UserDomain::UpdateUsersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_QueryUsers<WithAsyncMethod_CreateUsers<WithAsyncMethod_UpdateUsers<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_QueryUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryUsers() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::UserDomain::QueryUsersRequest, ::UserDomain::QueryUsersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::UserDomain::QueryUsersRequest* request, ::UserDomain::QueryUsersResponse* response) { return this->QueryUsers(context, request, response); }));}
    void SetMessageAllocatorFor_QueryUsers(
        ::grpc::MessageAllocator< ::UserDomain::QueryUsersRequest, ::UserDomain::QueryUsersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::UserDomain::QueryUsersRequest, ::UserDomain::QueryUsersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::QueryUsersRequest* /*request*/, ::UserDomain::QueryUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::UserDomain::QueryUsersRequest* /*request*/, ::UserDomain::QueryUsersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateUsers() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::UserDomain::CreateUsersRequest, ::UserDomain::CreateUsersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::UserDomain::CreateUsersRequest* request, ::UserDomain::CreateUsersResponse* response) { return this->CreateUsers(context, request, response); }));}
    void SetMessageAllocatorFor_CreateUsers(
        ::grpc::MessageAllocator< ::UserDomain::CreateUsersRequest, ::UserDomain::CreateUsersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::UserDomain::CreateUsersRequest, ::UserDomain::CreateUsersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::CreateUsersRequest* /*request*/, ::UserDomain::CreateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::UserDomain::CreateUsersRequest* /*request*/, ::UserDomain::CreateUsersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUsers() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::UserDomain::UpdateUsersRequest, ::UserDomain::UpdateUsersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::UserDomain::UpdateUsersRequest* request, ::UserDomain::UpdateUsersResponse* response) { return this->UpdateUsers(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUsers(
        ::grpc::MessageAllocator< ::UserDomain::UpdateUsersRequest, ::UserDomain::UpdateUsersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::UserDomain::UpdateUsersRequest, ::UserDomain::UpdateUsersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::UpdateUsersRequest* /*request*/, ::UserDomain::UpdateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::UserDomain::UpdateUsersRequest* /*request*/, ::UserDomain::UpdateUsersResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_QueryUsers<WithCallbackMethod_CreateUsers<WithCallbackMethod_UpdateUsers<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_QueryUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryUsers() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_QueryUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::QueryUsersRequest* /*request*/, ::UserDomain::QueryUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateUsers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::CreateUsersRequest* /*request*/, ::UserDomain::CreateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUsers() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::UpdateUsersRequest* /*request*/, ::UserDomain::UpdateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryUsers() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_QueryUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::QueryUsersRequest* /*request*/, ::UserDomain::QueryUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateUsers() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::CreateUsersRequest* /*request*/, ::UserDomain::CreateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUsers() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::UpdateUsersRequest* /*request*/, ::UserDomain::UpdateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryUsers() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryUsers(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::QueryUsersRequest* /*request*/, ::UserDomain::QueryUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateUsers() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateUsers(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::CreateUsersRequest* /*request*/, ::UserDomain::CreateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUsers() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUsers(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::UpdateUsersRequest* /*request*/, ::UserDomain::UpdateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryUsers() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::UserDomain::QueryUsersRequest, ::UserDomain::QueryUsersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::UserDomain::QueryUsersRequest, ::UserDomain::QueryUsersResponse>* streamer) {
                       return this->StreamedQueryUsers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::QueryUsersRequest* /*request*/, ::UserDomain::QueryUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UserDomain::QueryUsersRequest,::UserDomain::QueryUsersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateUsers() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::UserDomain::CreateUsersRequest, ::UserDomain::CreateUsersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::UserDomain::CreateUsersRequest, ::UserDomain::CreateUsersResponse>* streamer) {
                       return this->StreamedCreateUsers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::CreateUsersRequest* /*request*/, ::UserDomain::CreateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UserDomain::CreateUsersRequest,::UserDomain::CreateUsersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUsers() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::UserDomain::UpdateUsersRequest, ::UserDomain::UpdateUsersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::UserDomain::UpdateUsersRequest, ::UserDomain::UpdateUsersResponse>* streamer) {
                       return this->StreamedUpdateUsers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUsers(::grpc::ServerContext* /*context*/, const ::UserDomain::UpdateUsersRequest* /*request*/, ::UserDomain::UpdateUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UserDomain::UpdateUsersRequest,::UserDomain::UpdateUsersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_QueryUsers<WithStreamedUnaryMethod_CreateUsers<WithStreamedUnaryMethod_UpdateUsers<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_QueryUsers<WithStreamedUnaryMethod_CreateUsers<WithStreamedUnaryMethod_UpdateUsers<Service > > > StreamedService;
};

}  // namespace UserDomain


#endif  // GRPC_user_2eproto__INCLUDED
