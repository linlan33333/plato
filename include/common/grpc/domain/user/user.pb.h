// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "user_dto.pb.h"
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
namespace UserDomain {
class CreateUsersRequest;
struct CreateUsersRequestDefaultTypeInternal;
extern CreateUsersRequestDefaultTypeInternal _CreateUsersRequest_default_instance_;
class CreateUsersResponse;
struct CreateUsersResponseDefaultTypeInternal;
extern CreateUsersResponseDefaultTypeInternal _CreateUsersResponse_default_instance_;
class OptionMode;
struct OptionModeDefaultTypeInternal;
extern OptionModeDefaultTypeInternal _OptionMode_default_instance_;
class QueryUserOption;
struct QueryUserOptionDefaultTypeInternal;
extern QueryUserOptionDefaultTypeInternal _QueryUserOption_default_instance_;
class QueryUsersRequest;
struct QueryUsersRequestDefaultTypeInternal;
extern QueryUsersRequestDefaultTypeInternal _QueryUsersRequest_default_instance_;
class QueryUsersRequest_OptsEntry_DoNotUse;
struct QueryUsersRequest_OptsEntry_DoNotUseDefaultTypeInternal;
extern QueryUsersRequest_OptsEntry_DoNotUseDefaultTypeInternal _QueryUsersRequest_OptsEntry_DoNotUse_default_instance_;
class QueryUsersResponse;
struct QueryUsersResponseDefaultTypeInternal;
extern QueryUsersResponseDefaultTypeInternal _QueryUsersResponse_default_instance_;
class QueryUsersResponse_UsersEntry_DoNotUse;
struct QueryUsersResponse_UsersEntry_DoNotUseDefaultTypeInternal;
extern QueryUsersResponse_UsersEntry_DoNotUseDefaultTypeInternal _QueryUsersResponse_UsersEntry_DoNotUse_default_instance_;
class UpdateUsersRequest;
struct UpdateUsersRequestDefaultTypeInternal;
extern UpdateUsersRequestDefaultTypeInternal _UpdateUsersRequest_default_instance_;
class UpdateUsersResponse;
struct UpdateUsersResponseDefaultTypeInternal;
extern UpdateUsersResponseDefaultTypeInternal _UpdateUsersResponse_default_instance_;
}  // namespace UserDomain
PROTOBUF_NAMESPACE_OPEN
template<> ::UserDomain::CreateUsersRequest* Arena::CreateMaybeMessage<::UserDomain::CreateUsersRequest>(Arena*);
template<> ::UserDomain::CreateUsersResponse* Arena::CreateMaybeMessage<::UserDomain::CreateUsersResponse>(Arena*);
template<> ::UserDomain::OptionMode* Arena::CreateMaybeMessage<::UserDomain::OptionMode>(Arena*);
template<> ::UserDomain::QueryUserOption* Arena::CreateMaybeMessage<::UserDomain::QueryUserOption>(Arena*);
template<> ::UserDomain::QueryUsersRequest* Arena::CreateMaybeMessage<::UserDomain::QueryUsersRequest>(Arena*);
template<> ::UserDomain::QueryUsersRequest_OptsEntry_DoNotUse* Arena::CreateMaybeMessage<::UserDomain::QueryUsersRequest_OptsEntry_DoNotUse>(Arena*);
template<> ::UserDomain::QueryUsersResponse* Arena::CreateMaybeMessage<::UserDomain::QueryUsersResponse>(Arena*);
template<> ::UserDomain::QueryUsersResponse_UsersEntry_DoNotUse* Arena::CreateMaybeMessage<::UserDomain::QueryUsersResponse_UsersEntry_DoNotUse>(Arena*);
template<> ::UserDomain::UpdateUsersRequest* Arena::CreateMaybeMessage<::UserDomain::UpdateUsersRequest>(Arena*);
template<> ::UserDomain::UpdateUsersResponse* Arena::CreateMaybeMessage<::UserDomain::UpdateUsersResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace UserDomain {

// ===================================================================

class QueryUsersRequest_OptsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryUsersRequest_OptsEntry_DoNotUse, 
    uint64_t, ::UserDomain::QueryUserOption,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryUsersRequest_OptsEntry_DoNotUse, 
    uint64_t, ::UserDomain::QueryUserOption,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  QueryUsersRequest_OptsEntry_DoNotUse();
  explicit constexpr QueryUsersRequest_OptsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit QueryUsersRequest_OptsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryUsersRequest_OptsEntry_DoNotUse& other);
  static const QueryUsersRequest_OptsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryUsersRequest_OptsEntry_DoNotUse*>(&_QueryUsersRequest_OptsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class QueryUsersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserDomain.QueryUsersRequest) */ {
 public:
  inline QueryUsersRequest() : QueryUsersRequest(nullptr) {}
  ~QueryUsersRequest() override;
  explicit constexpr QueryUsersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUsersRequest(const QueryUsersRequest& from);
  QueryUsersRequest(QueryUsersRequest&& from) noexcept
    : QueryUsersRequest() {
    *this = ::std::move(from);
  }

  inline QueryUsersRequest& operator=(const QueryUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUsersRequest& operator=(QueryUsersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUsersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUsersRequest* internal_default_instance() {
    return reinterpret_cast<const QueryUsersRequest*>(
               &_QueryUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryUsersRequest& a, QueryUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUsersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUsersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUsersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryUsersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUsersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserDomain.QueryUsersRequest";
  }
  protected:
  explicit QueryUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOptsFieldNumber = 1,
  };
  // map<uint64, .UserDomain.QueryUserOption> opts = 1;
  int opts_size() const;
  private:
  int _internal_opts_size() const;
  public:
  void clear_opts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >&
      _internal_opts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >*
      _internal_mutable_opts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >&
      opts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >*
      mutable_opts();

  // @@protoc_insertion_point(class_scope:UserDomain.QueryUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryUsersRequest_OptsEntry_DoNotUse,
      uint64_t, ::UserDomain::QueryUserOption,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> opts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class QueryUserOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserDomain.QueryUserOption) */ {
 public:
  inline QueryUserOption() : QueryUserOption(nullptr) {}
  ~QueryUserOption() override;
  explicit constexpr QueryUserOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUserOption(const QueryUserOption& from);
  QueryUserOption(QueryUserOption&& from) noexcept
    : QueryUserOption() {
    *this = ::std::move(from);
  }

  inline QueryUserOption& operator=(const QueryUserOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUserOption& operator=(QueryUserOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUserOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUserOption* internal_default_instance() {
    return reinterpret_cast<const QueryUserOption*>(
               &_QueryUserOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryUserOption& a, QueryUserOption& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUserOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUserOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUserOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUserOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUserOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryUserOption& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUserOption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserDomain.QueryUserOption";
  }
  protected:
  explicit QueryUserOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDListFieldNumber = 1,
    kModeFieldNumber = 4,
    kAllDeviceFieldNumber = 2,
    kActiveDeviceFieldNumber = 3,
  };
  // repeated uint64 deviceIDList = 1;
  int deviceidlist_size() const;
  private:
  int _internal_deviceidlist_size() const;
  public:
  void clear_deviceidlist();
  private:
  uint64_t _internal_deviceidlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_deviceidlist() const;
  void _internal_add_deviceidlist(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_deviceidlist();
  public:
  uint64_t deviceidlist(int index) const;
  void set_deviceidlist(int index, uint64_t value);
  void add_deviceidlist(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      deviceidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_deviceidlist();

  // .UserDomain.OptionMode mode = 4;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::UserDomain::OptionMode& mode() const;
  PROTOBUF_NODISCARD ::UserDomain::OptionMode* release_mode();
  ::UserDomain::OptionMode* mutable_mode();
  void set_allocated_mode(::UserDomain::OptionMode* mode);
  private:
  const ::UserDomain::OptionMode& _internal_mode() const;
  ::UserDomain::OptionMode* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::UserDomain::OptionMode* mode);
  ::UserDomain::OptionMode* unsafe_arena_release_mode();

  // bool allDevice = 2;
  void clear_alldevice();
  bool alldevice() const;
  void set_alldevice(bool value);
  private:
  bool _internal_alldevice() const;
  void _internal_set_alldevice(bool value);
  public:

  // bool activeDevice = 3;
  void clear_activedevice();
  bool activedevice() const;
  void set_activedevice(bool value);
  private:
  bool _internal_activedevice() const;
  void _internal_set_activedevice(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UserDomain.QueryUserOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > deviceidlist_;
  mutable std::atomic<int> _deviceidlist_cached_byte_size_;
  ::UserDomain::OptionMode* mode_;
  bool alldevice_;
  bool activedevice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class OptionMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserDomain.OptionMode) */ {
 public:
  inline OptionMode() : OptionMode(nullptr) {}
  ~OptionMode() override;
  explicit constexpr OptionMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionMode(const OptionMode& from);
  OptionMode(OptionMode&& from) noexcept
    : OptionMode() {
    *this = ::std::move(from);
  }

  inline OptionMode& operator=(const OptionMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionMode& operator=(OptionMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionMode* internal_default_instance() {
    return reinterpret_cast<const OptionMode*>(
               &_OptionMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OptionMode& a, OptionMode& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptionMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserDomain.OptionMode";
  }
  protected:
  explicit OptionMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kSettingFieldNumber = 2,
    kInformationFieldNumber = 3,
    kProfileFieldNumber = 4,
  };
  // bool Device = 1;
  void clear_device();
  bool device() const;
  void set_device(bool value);
  private:
  bool _internal_device() const;
  void _internal_set_device(bool value);
  public:

  // bool Setting = 2;
  void clear_setting();
  bool setting() const;
  void set_setting(bool value);
  private:
  bool _internal_setting() const;
  void _internal_set_setting(bool value);
  public:

  // bool Information = 3;
  void clear_information();
  bool information() const;
  void set_information(bool value);
  private:
  bool _internal_information() const;
  void _internal_set_information(bool value);
  public:

  // bool Profile = 4;
  void clear_profile();
  bool profile() const;
  void set_profile(bool value);
  private:
  bool _internal_profile() const;
  void _internal_set_profile(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UserDomain.OptionMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool device_;
  bool setting_;
  bool information_;
  bool profile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class QueryUsersResponse_UsersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryUsersResponse_UsersEntry_DoNotUse, 
    uint64_t, ::user::UserDTO,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryUsersResponse_UsersEntry_DoNotUse, 
    uint64_t, ::user::UserDTO,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  QueryUsersResponse_UsersEntry_DoNotUse();
  explicit constexpr QueryUsersResponse_UsersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit QueryUsersResponse_UsersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryUsersResponse_UsersEntry_DoNotUse& other);
  static const QueryUsersResponse_UsersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryUsersResponse_UsersEntry_DoNotUse*>(&_QueryUsersResponse_UsersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class QueryUsersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserDomain.QueryUsersResponse) */ {
 public:
  inline QueryUsersResponse() : QueryUsersResponse(nullptr) {}
  ~QueryUsersResponse() override;
  explicit constexpr QueryUsersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUsersResponse(const QueryUsersResponse& from);
  QueryUsersResponse(QueryUsersResponse&& from) noexcept
    : QueryUsersResponse() {
    *this = ::std::move(from);
  }

  inline QueryUsersResponse& operator=(const QueryUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUsersResponse& operator=(QueryUsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUsersResponse* internal_default_instance() {
    return reinterpret_cast<const QueryUsersResponse*>(
               &_QueryUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryUsersResponse& a, QueryUsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUsersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUsersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUsersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUsersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryUsersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUsersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserDomain.QueryUsersResponse";
  }
  protected:
  explicit QueryUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // map<uint64, .user.UserDTO> users = 2;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >&
      _internal_users() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >*
      _internal_mutable_users();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >&
      users() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >*
      mutable_users();

  // .base.BaseResp base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::base::BaseResp& base() const;
  PROTOBUF_NODISCARD ::base::BaseResp* release_base();
  ::base::BaseResp* mutable_base();
  void set_allocated_base(::base::BaseResp* base);
  private:
  const ::base::BaseResp& _internal_base() const;
  ::base::BaseResp* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::base::BaseResp* base);
  ::base::BaseResp* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:UserDomain.QueryUsersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryUsersResponse_UsersEntry_DoNotUse,
      uint64_t, ::user::UserDTO,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> users_;
  ::base::BaseResp* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CreateUsersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserDomain.CreateUsersRequest) */ {
 public:
  inline CreateUsersRequest() : CreateUsersRequest(nullptr) {}
  ~CreateUsersRequest() override;
  explicit constexpr CreateUsersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUsersRequest(const CreateUsersRequest& from);
  CreateUsersRequest(CreateUsersRequest&& from) noexcept
    : CreateUsersRequest() {
    *this = ::std::move(from);
  }

  inline CreateUsersRequest& operator=(const CreateUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUsersRequest& operator=(CreateUsersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUsersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUsersRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUsersRequest*>(
               &_CreateUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateUsersRequest& a, CreateUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUsersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUsersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUsersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUsersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUsersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserDomain.CreateUsersRequest";
  }
  protected:
  explicit CreateUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .user.UserDTO users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::user::UserDTO* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::UserDTO >*
      mutable_users();
  private:
  const ::user::UserDTO& _internal_users(int index) const;
  ::user::UserDTO* _internal_add_users();
  public:
  const ::user::UserDTO& users(int index) const;
  ::user::UserDTO* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::UserDTO >&
      users() const;

  // @@protoc_insertion_point(class_scope:UserDomain.CreateUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::UserDTO > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CreateUsersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserDomain.CreateUsersResponse) */ {
 public:
  inline CreateUsersResponse() : CreateUsersResponse(nullptr) {}
  ~CreateUsersResponse() override;
  explicit constexpr CreateUsersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUsersResponse(const CreateUsersResponse& from);
  CreateUsersResponse(CreateUsersResponse&& from) noexcept
    : CreateUsersResponse() {
    *this = ::std::move(from);
  }

  inline CreateUsersResponse& operator=(const CreateUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUsersResponse& operator=(CreateUsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUsersResponse* internal_default_instance() {
    return reinterpret_cast<const CreateUsersResponse*>(
               &_CreateUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateUsersResponse& a, CreateUsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUsersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUsersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUsersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUsersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUsersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUsersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserDomain.CreateUsersResponse";
  }
  protected:
  explicit CreateUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kBaseFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .base.BaseResp base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::base::BaseResp& base() const;
  PROTOBUF_NODISCARD ::base::BaseResp* release_base();
  ::base::BaseResp* mutable_base();
  void set_allocated_base(::base::BaseResp* base);
  private:
  const ::base::BaseResp& _internal_base() const;
  ::base::BaseResp* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::base::BaseResp* base);
  ::base::BaseResp* unsafe_arena_release_base();

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserDomain.CreateUsersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::base::BaseResp* base_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UpdateUsersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserDomain.UpdateUsersRequest) */ {
 public:
  inline UpdateUsersRequest() : UpdateUsersRequest(nullptr) {}
  ~UpdateUsersRequest() override;
  explicit constexpr UpdateUsersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUsersRequest(const UpdateUsersRequest& from);
  UpdateUsersRequest(UpdateUsersRequest&& from) noexcept
    : UpdateUsersRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUsersRequest& operator=(const UpdateUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUsersRequest& operator=(UpdateUsersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUsersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUsersRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUsersRequest*>(
               &_UpdateUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateUsersRequest& a, UpdateUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUsersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUsersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUsersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUsersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUsersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserDomain.UpdateUsersRequest";
  }
  protected:
  explicit UpdateUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .user.UserDTO users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::user::UserDTO* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::UserDTO >*
      mutable_users();
  private:
  const ::user::UserDTO& _internal_users(int index) const;
  ::user::UserDTO* _internal_add_users();
  public:
  const ::user::UserDTO& users(int index) const;
  ::user::UserDTO* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::UserDTO >&
      users() const;

  // @@protoc_insertion_point(class_scope:UserDomain.UpdateUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::UserDTO > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UpdateUsersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserDomain.UpdateUsersResponse) */ {
 public:
  inline UpdateUsersResponse() : UpdateUsersResponse(nullptr) {}
  ~UpdateUsersResponse() override;
  explicit constexpr UpdateUsersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUsersResponse(const UpdateUsersResponse& from);
  UpdateUsersResponse(UpdateUsersResponse&& from) noexcept
    : UpdateUsersResponse() {
    *this = ::std::move(from);
  }

  inline UpdateUsersResponse& operator=(const UpdateUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUsersResponse& operator=(UpdateUsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUsersResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateUsersResponse*>(
               &_UpdateUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateUsersResponse& a, UpdateUsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUsersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUsersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUsersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUsersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUsersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUsersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserDomain.UpdateUsersResponse";
  }
  protected:
  explicit UpdateUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kBaseFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .base.BaseResp base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::base::BaseResp& base() const;
  PROTOBUF_NODISCARD ::base::BaseResp* release_base();
  ::base::BaseResp* mutable_base();
  void set_allocated_base(::base::BaseResp* base);
  private:
  const ::base::BaseResp& _internal_base() const;
  ::base::BaseResp* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::base::BaseResp* base);
  ::base::BaseResp* unsafe_arena_release_base();

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserDomain.UpdateUsersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::base::BaseResp* base_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryUsersRequest

// map<uint64, .UserDomain.QueryUserOption> opts = 1;
inline int QueryUsersRequest::_internal_opts_size() const {
  return opts_.size();
}
inline int QueryUsersRequest::opts_size() const {
  return _internal_opts_size();
}
inline void QueryUsersRequest::clear_opts() {
  opts_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >&
QueryUsersRequest::_internal_opts() const {
  return opts_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >&
QueryUsersRequest::opts() const {
  // @@protoc_insertion_point(field_map:UserDomain.QueryUsersRequest.opts)
  return _internal_opts();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >*
QueryUsersRequest::_internal_mutable_opts() {
  return opts_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::UserDomain::QueryUserOption >*
QueryUsersRequest::mutable_opts() {
  // @@protoc_insertion_point(field_mutable_map:UserDomain.QueryUsersRequest.opts)
  return _internal_mutable_opts();
}

// -------------------------------------------------------------------

// QueryUserOption

// repeated uint64 deviceIDList = 1;
inline int QueryUserOption::_internal_deviceidlist_size() const {
  return deviceidlist_.size();
}
inline int QueryUserOption::deviceidlist_size() const {
  return _internal_deviceidlist_size();
}
inline void QueryUserOption::clear_deviceidlist() {
  deviceidlist_.Clear();
}
inline uint64_t QueryUserOption::_internal_deviceidlist(int index) const {
  return deviceidlist_.Get(index);
}
inline uint64_t QueryUserOption::deviceidlist(int index) const {
  // @@protoc_insertion_point(field_get:UserDomain.QueryUserOption.deviceIDList)
  return _internal_deviceidlist(index);
}
inline void QueryUserOption::set_deviceidlist(int index, uint64_t value) {
  deviceidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserDomain.QueryUserOption.deviceIDList)
}
inline void QueryUserOption::_internal_add_deviceidlist(uint64_t value) {
  deviceidlist_.Add(value);
}
inline void QueryUserOption::add_deviceidlist(uint64_t value) {
  _internal_add_deviceidlist(value);
  // @@protoc_insertion_point(field_add:UserDomain.QueryUserOption.deviceIDList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
QueryUserOption::_internal_deviceidlist() const {
  return deviceidlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
QueryUserOption::deviceidlist() const {
  // @@protoc_insertion_point(field_list:UserDomain.QueryUserOption.deviceIDList)
  return _internal_deviceidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
QueryUserOption::_internal_mutable_deviceidlist() {
  return &deviceidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
QueryUserOption::mutable_deviceidlist() {
  // @@protoc_insertion_point(field_mutable_list:UserDomain.QueryUserOption.deviceIDList)
  return _internal_mutable_deviceidlist();
}

// bool allDevice = 2;
inline void QueryUserOption::clear_alldevice() {
  alldevice_ = false;
}
inline bool QueryUserOption::_internal_alldevice() const {
  return alldevice_;
}
inline bool QueryUserOption::alldevice() const {
  // @@protoc_insertion_point(field_get:UserDomain.QueryUserOption.allDevice)
  return _internal_alldevice();
}
inline void QueryUserOption::_internal_set_alldevice(bool value) {
  
  alldevice_ = value;
}
inline void QueryUserOption::set_alldevice(bool value) {
  _internal_set_alldevice(value);
  // @@protoc_insertion_point(field_set:UserDomain.QueryUserOption.allDevice)
}

// bool activeDevice = 3;
inline void QueryUserOption::clear_activedevice() {
  activedevice_ = false;
}
inline bool QueryUserOption::_internal_activedevice() const {
  return activedevice_;
}
inline bool QueryUserOption::activedevice() const {
  // @@protoc_insertion_point(field_get:UserDomain.QueryUserOption.activeDevice)
  return _internal_activedevice();
}
inline void QueryUserOption::_internal_set_activedevice(bool value) {
  
  activedevice_ = value;
}
inline void QueryUserOption::set_activedevice(bool value) {
  _internal_set_activedevice(value);
  // @@protoc_insertion_point(field_set:UserDomain.QueryUserOption.activeDevice)
}

// .UserDomain.OptionMode mode = 4;
inline bool QueryUserOption::_internal_has_mode() const {
  return this != internal_default_instance() && mode_ != nullptr;
}
inline bool QueryUserOption::has_mode() const {
  return _internal_has_mode();
}
inline void QueryUserOption::clear_mode() {
  if (GetArenaForAllocation() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
}
inline const ::UserDomain::OptionMode& QueryUserOption::_internal_mode() const {
  const ::UserDomain::OptionMode* p = mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserDomain::OptionMode&>(
      ::UserDomain::_OptionMode_default_instance_);
}
inline const ::UserDomain::OptionMode& QueryUserOption::mode() const {
  // @@protoc_insertion_point(field_get:UserDomain.QueryUserOption.mode)
  return _internal_mode();
}
inline void QueryUserOption::unsafe_arena_set_allocated_mode(
    ::UserDomain::OptionMode* mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  mode_ = mode;
  if (mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserDomain.QueryUserOption.mode)
}
inline ::UserDomain::OptionMode* QueryUserOption::release_mode() {
  
  ::UserDomain::OptionMode* temp = mode_;
  mode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserDomain::OptionMode* QueryUserOption::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:UserDomain.QueryUserOption.mode)
  
  ::UserDomain::OptionMode* temp = mode_;
  mode_ = nullptr;
  return temp;
}
inline ::UserDomain::OptionMode* QueryUserOption::_internal_mutable_mode() {
  
  if (mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserDomain::OptionMode>(GetArenaForAllocation());
    mode_ = p;
  }
  return mode_;
}
inline ::UserDomain::OptionMode* QueryUserOption::mutable_mode() {
  ::UserDomain::OptionMode* _msg = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:UserDomain.QueryUserOption.mode)
  return _msg;
}
inline void QueryUserOption::set_allocated_mode(::UserDomain::OptionMode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mode_;
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::UserDomain::OptionMode>::GetOwningArena(mode);
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:UserDomain.QueryUserOption.mode)
}

// -------------------------------------------------------------------

// OptionMode

// bool Device = 1;
inline void OptionMode::clear_device() {
  device_ = false;
}
inline bool OptionMode::_internal_device() const {
  return device_;
}
inline bool OptionMode::device() const {
  // @@protoc_insertion_point(field_get:UserDomain.OptionMode.Device)
  return _internal_device();
}
inline void OptionMode::_internal_set_device(bool value) {
  
  device_ = value;
}
inline void OptionMode::set_device(bool value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:UserDomain.OptionMode.Device)
}

// bool Setting = 2;
inline void OptionMode::clear_setting() {
  setting_ = false;
}
inline bool OptionMode::_internal_setting() const {
  return setting_;
}
inline bool OptionMode::setting() const {
  // @@protoc_insertion_point(field_get:UserDomain.OptionMode.Setting)
  return _internal_setting();
}
inline void OptionMode::_internal_set_setting(bool value) {
  
  setting_ = value;
}
inline void OptionMode::set_setting(bool value) {
  _internal_set_setting(value);
  // @@protoc_insertion_point(field_set:UserDomain.OptionMode.Setting)
}

// bool Information = 3;
inline void OptionMode::clear_information() {
  information_ = false;
}
inline bool OptionMode::_internal_information() const {
  return information_;
}
inline bool OptionMode::information() const {
  // @@protoc_insertion_point(field_get:UserDomain.OptionMode.Information)
  return _internal_information();
}
inline void OptionMode::_internal_set_information(bool value) {
  
  information_ = value;
}
inline void OptionMode::set_information(bool value) {
  _internal_set_information(value);
  // @@protoc_insertion_point(field_set:UserDomain.OptionMode.Information)
}

// bool Profile = 4;
inline void OptionMode::clear_profile() {
  profile_ = false;
}
inline bool OptionMode::_internal_profile() const {
  return profile_;
}
inline bool OptionMode::profile() const {
  // @@protoc_insertion_point(field_get:UserDomain.OptionMode.Profile)
  return _internal_profile();
}
inline void OptionMode::_internal_set_profile(bool value) {
  
  profile_ = value;
}
inline void OptionMode::set_profile(bool value) {
  _internal_set_profile(value);
  // @@protoc_insertion_point(field_set:UserDomain.OptionMode.Profile)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryUsersResponse

// .base.BaseResp base = 1;
inline bool QueryUsersResponse::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool QueryUsersResponse::has_base() const {
  return _internal_has_base();
}
inline const ::base::BaseResp& QueryUsersResponse::_internal_base() const {
  const ::base::BaseResp* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::BaseResp&>(
      ::base::_BaseResp_default_instance_);
}
inline const ::base::BaseResp& QueryUsersResponse::base() const {
  // @@protoc_insertion_point(field_get:UserDomain.QueryUsersResponse.base)
  return _internal_base();
}
inline void QueryUsersResponse::unsafe_arena_set_allocated_base(
    ::base::BaseResp* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserDomain.QueryUsersResponse.base)
}
inline ::base::BaseResp* QueryUsersResponse::release_base() {
  
  ::base::BaseResp* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::base::BaseResp* QueryUsersResponse::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:UserDomain.QueryUsersResponse.base)
  
  ::base::BaseResp* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::base::BaseResp* QueryUsersResponse::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::BaseResp>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::base::BaseResp* QueryUsersResponse::mutable_base() {
  ::base::BaseResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:UserDomain.QueryUsersResponse.base)
  return _msg;
}
inline void QueryUsersResponse::set_allocated_base(::base::BaseResp* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:UserDomain.QueryUsersResponse.base)
}

// map<uint64, .user.UserDTO> users = 2;
inline int QueryUsersResponse::_internal_users_size() const {
  return users_.size();
}
inline int QueryUsersResponse::users_size() const {
  return _internal_users_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >&
QueryUsersResponse::_internal_users() const {
  return users_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >&
QueryUsersResponse::users() const {
  // @@protoc_insertion_point(field_map:UserDomain.QueryUsersResponse.users)
  return _internal_users();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >*
QueryUsersResponse::_internal_mutable_users() {
  return users_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::user::UserDTO >*
QueryUsersResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_map:UserDomain.QueryUsersResponse.users)
  return _internal_mutable_users();
}

// -------------------------------------------------------------------

// CreateUsersRequest

// repeated .user.UserDTO users = 1;
inline int CreateUsersRequest::_internal_users_size() const {
  return users_.size();
}
inline int CreateUsersRequest::users_size() const {
  return _internal_users_size();
}
inline ::user::UserDTO* CreateUsersRequest::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:UserDomain.CreateUsersRequest.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::UserDTO >*
CreateUsersRequest::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:UserDomain.CreateUsersRequest.users)
  return &users_;
}
inline const ::user::UserDTO& CreateUsersRequest::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::user::UserDTO& CreateUsersRequest::users(int index) const {
  // @@protoc_insertion_point(field_get:UserDomain.CreateUsersRequest.users)
  return _internal_users(index);
}
inline ::user::UserDTO* CreateUsersRequest::_internal_add_users() {
  return users_.Add();
}
inline ::user::UserDTO* CreateUsersRequest::add_users() {
  ::user::UserDTO* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:UserDomain.CreateUsersRequest.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::UserDTO >&
CreateUsersRequest::users() const {
  // @@protoc_insertion_point(field_list:UserDomain.CreateUsersRequest.users)
  return users_;
}

// -------------------------------------------------------------------

// CreateUsersResponse

// .base.BaseResp base = 1;
inline bool CreateUsersResponse::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool CreateUsersResponse::has_base() const {
  return _internal_has_base();
}
inline const ::base::BaseResp& CreateUsersResponse::_internal_base() const {
  const ::base::BaseResp* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::BaseResp&>(
      ::base::_BaseResp_default_instance_);
}
inline const ::base::BaseResp& CreateUsersResponse::base() const {
  // @@protoc_insertion_point(field_get:UserDomain.CreateUsersResponse.base)
  return _internal_base();
}
inline void CreateUsersResponse::unsafe_arena_set_allocated_base(
    ::base::BaseResp* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserDomain.CreateUsersResponse.base)
}
inline ::base::BaseResp* CreateUsersResponse::release_base() {
  
  ::base::BaseResp* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::base::BaseResp* CreateUsersResponse::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:UserDomain.CreateUsersResponse.base)
  
  ::base::BaseResp* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::base::BaseResp* CreateUsersResponse::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::BaseResp>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::base::BaseResp* CreateUsersResponse::mutable_base() {
  ::base::BaseResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:UserDomain.CreateUsersResponse.base)
  return _msg;
}
inline void CreateUsersResponse::set_allocated_base(::base::BaseResp* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:UserDomain.CreateUsersResponse.base)
}

// int32 code = 2;
inline void CreateUsersResponse::clear_code() {
  code_ = 0;
}
inline int32_t CreateUsersResponse::_internal_code() const {
  return code_;
}
inline int32_t CreateUsersResponse::code() const {
  // @@protoc_insertion_point(field_get:UserDomain.CreateUsersResponse.code)
  return _internal_code();
}
inline void CreateUsersResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void CreateUsersResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:UserDomain.CreateUsersResponse.code)
}

// string msg = 3;
inline void CreateUsersResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CreateUsersResponse::msg() const {
  // @@protoc_insertion_point(field_get:UserDomain.CreateUsersResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUsersResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserDomain.CreateUsersResponse.msg)
}
inline std::string* CreateUsersResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:UserDomain.CreateUsersResponse.msg)
  return _s;
}
inline const std::string& CreateUsersResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CreateUsersResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUsersResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUsersResponse::release_msg() {
  // @@protoc_insertion_point(field_release:UserDomain.CreateUsersResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUsersResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserDomain.CreateUsersResponse.msg)
}

// -------------------------------------------------------------------

// UpdateUsersRequest

// repeated .user.UserDTO users = 1;
inline int UpdateUsersRequest::_internal_users_size() const {
  return users_.size();
}
inline int UpdateUsersRequest::users_size() const {
  return _internal_users_size();
}
inline ::user::UserDTO* UpdateUsersRequest::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:UserDomain.UpdateUsersRequest.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::UserDTO >*
UpdateUsersRequest::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:UserDomain.UpdateUsersRequest.users)
  return &users_;
}
inline const ::user::UserDTO& UpdateUsersRequest::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::user::UserDTO& UpdateUsersRequest::users(int index) const {
  // @@protoc_insertion_point(field_get:UserDomain.UpdateUsersRequest.users)
  return _internal_users(index);
}
inline ::user::UserDTO* UpdateUsersRequest::_internal_add_users() {
  return users_.Add();
}
inline ::user::UserDTO* UpdateUsersRequest::add_users() {
  ::user::UserDTO* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:UserDomain.UpdateUsersRequest.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::UserDTO >&
UpdateUsersRequest::users() const {
  // @@protoc_insertion_point(field_list:UserDomain.UpdateUsersRequest.users)
  return users_;
}

// -------------------------------------------------------------------

// UpdateUsersResponse

// .base.BaseResp base = 1;
inline bool UpdateUsersResponse::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool UpdateUsersResponse::has_base() const {
  return _internal_has_base();
}
inline const ::base::BaseResp& UpdateUsersResponse::_internal_base() const {
  const ::base::BaseResp* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::BaseResp&>(
      ::base::_BaseResp_default_instance_);
}
inline const ::base::BaseResp& UpdateUsersResponse::base() const {
  // @@protoc_insertion_point(field_get:UserDomain.UpdateUsersResponse.base)
  return _internal_base();
}
inline void UpdateUsersResponse::unsafe_arena_set_allocated_base(
    ::base::BaseResp* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserDomain.UpdateUsersResponse.base)
}
inline ::base::BaseResp* UpdateUsersResponse::release_base() {
  
  ::base::BaseResp* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::base::BaseResp* UpdateUsersResponse::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:UserDomain.UpdateUsersResponse.base)
  
  ::base::BaseResp* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::base::BaseResp* UpdateUsersResponse::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::BaseResp>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::base::BaseResp* UpdateUsersResponse::mutable_base() {
  ::base::BaseResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:UserDomain.UpdateUsersResponse.base)
  return _msg;
}
inline void UpdateUsersResponse::set_allocated_base(::base::BaseResp* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:UserDomain.UpdateUsersResponse.base)
}

// int32 code = 2;
inline void UpdateUsersResponse::clear_code() {
  code_ = 0;
}
inline int32_t UpdateUsersResponse::_internal_code() const {
  return code_;
}
inline int32_t UpdateUsersResponse::code() const {
  // @@protoc_insertion_point(field_get:UserDomain.UpdateUsersResponse.code)
  return _internal_code();
}
inline void UpdateUsersResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void UpdateUsersResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:UserDomain.UpdateUsersResponse.code)
}

// string msg = 3;
inline void UpdateUsersResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdateUsersResponse::msg() const {
  // @@protoc_insertion_point(field_get:UserDomain.UpdateUsersResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUsersResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserDomain.UpdateUsersResponse.msg)
}
inline std::string* UpdateUsersResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:UserDomain.UpdateUsersResponse.msg)
  return _s;
}
inline const std::string& UpdateUsersResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateUsersResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateUsersResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateUsersResponse::release_msg() {
  // @@protoc_insertion_point(field_release:UserDomain.UpdateUsersResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateUsersResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserDomain.UpdateUsersResponse.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace UserDomain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
